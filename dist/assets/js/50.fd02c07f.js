(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{670:function(e,t,s){"use strict";s.r(t);var a=s(16),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"_4-1-使用dockerfile的最佳实践"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-使用dockerfile的最佳实践"}},[e._v("#")]),e._v(" 4.1 使用Dockerfile的最佳实践")]),e._v(" "),s("p",[e._v("本文档介绍了构建高效镜像的建议最佳实践和方法。")]),e._v(" "),s("p",[e._v("Docker通过"),s("code",[e._v("--a")]),e._v("参数读取一个文本文件"),s("code",[e._v("Dockerfile")]),e._v("中的指令自动构建镜像，Dockerfile是按顺序包含构建指定镜像所需的所有命令。 Dockerfile遵循特定的格式和指令集，您可以在"),s("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dockerfile引用"),s("OutboundLink")],1),e._v("中找到它们。")]),e._v(" "),s("p",[e._v("Docker镜像由只读层组成，每个层都代表一个Dockerfile指令。 这些层是堆叠的，每个层都是前一层变化的增量。 思考这个Dockerfile：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("FROM ubuntu:18.04\nCOPY "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" /app\nRUN "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" /app\nCMD python /app/app.py\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("每条指令创建一个层：")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("FROM")]),e._v("从"),s("code",[e._v("ubuntu：18.04")]),e._v("镜像创建一个只读层。")]),e._v(" "),s("li",[s("code",[e._v("COPY")]),e._v("从Docker客户端的当前目录中添加文件。")]),e._v(" "),s("li",[s("code",[e._v("RUN")]),e._v("使用make构建您的应用程序。")]),e._v(" "),s("li",[s("code",[e._v("CMD")]),e._v("指定在容器中运行的命令。")])]),e._v(" "),s("p",[e._v("运行镜像并生成容器时，可以在基础层的顶部添加新的可写层（“容器镜像层”）。对正在运行的容器所做的所有更改（例如，写入新文件，修改现有文件和删除文件）都将写入此可写容器层。")]),e._v(" "),s("p",[e._v("有关镜像层的更多信息（以及Docker如何构建和存储镜像），请参阅"),s("a",{attrs:{href:"https://docs.docker.com/storage/storagedriver/",target:"_blank",rel:"noopener noreferrer"}},[e._v("关于存储驱动程序"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("h2",{attrs:{id:"_1-一般准则和建议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-一般准则和建议"}},[e._v("#")]),e._v(" 1. 一般准则和建议")]),e._v(" "),s("h3",{attrs:{id:"_1-1-创建精小的容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-创建精小的容器"}},[e._v("#")]),e._v(" 1.1. 创建精小的容器")]),e._v(" "),s("p",[e._v("Dockerfile定义的容器应该生成尽可能精小的容器。我们的意思是容器可以被停止和销毁，然后重建并用绝对最小的设置和配置替换。")]),e._v(" "),s("p",[e._v("请参阅《十二因素应用程序》法则下的"),s("a",{attrs:{href:"https://12factor.net/processes",target:"_blank",rel:"noopener noreferrer"}},[e._v("流程"),s("OutboundLink")],1),e._v("，了解以无状态方式运行容器的好处。")]),e._v(" "),s("h3",{attrs:{id:"_1-2-了解构建上下文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-了解构建上下文"}},[e._v("#")]),e._v(" 1.2. 了解构建上下文")]),e._v(" "),s("p",[e._v("发出"),s("code",[e._v("docker build")]),e._v("命令时，当前工作目录称为构建上下文。默认情况下，假定Dockerfile位于此处，但您可以使用文件标志（"),s("code",[e._v("-f")]),e._v("）指定其他位置。无论Dockerfile实际存在于何处，当前目录中的所有文件和目录的递归内容都将作为构建上下文发送到Docker守护程序。")]),e._v(" "),s("blockquote",[s("p",[e._v("构建上下文示例\n为构建上下文创建一个目录并运用"),s("code",[e._v("cd")]),e._v("命令进入其中。将“hello”写入名为"),s("code",[e._v("hello")]),e._v("的文本文件中，并创建一个运行"),s("code",[e._v("cat")]),e._v("命令的Dockerfile。从构建上下文（"),s("code",[e._v(".")]),e._v("）中构建镜像：")])]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" myproject "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" myproject\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"hello"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" hello\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" -e "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"FROM busybox'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v("COPY /hello /"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v('RUN cat /hello"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" Dockerfile\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" build -t helloapp:v1 "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("blockquote",[s("p",[e._v("将"),s("code",[e._v("Dockerfile")]),e._v("和"),s("code",[e._v("hello")]),e._v("移动到单独的目录中并构建镜像的第二个版本（不依赖于上一次构建的缓存）。 使用"),s("code",[e._v("-f")]),e._v("指向Dockerfile并指定构建上下文的目录：")])]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" -p dockerfiles context\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mv")]),e._v(" Dockerfile dockerfiles "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mv")]),e._v(" hello context\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" build --no-cache -t helloapp:v2 -f dockerfiles/Dockerfile context\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("构建镜像时，无意中包含不必要的文件会导致更大的构建上下文和更大的镜像大小。 这可能增大构建镜像的时间，拉取和推送镜像的时间以及容器运行时大小。 要查看构建上下文有多大，请在构建"),s("code",[e._v("Dockerfile")]),e._v("时查找类似这样的消息：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("Sending build context to Docker daemon  "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("187")]),e._v(".8MB\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h3",{attrs:{id:"_1-3-通过stdin管道构建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-通过stdin管道构建"}},[e._v("#")]),e._v(" 1.3. 通过"),s("code",[e._v("stdin")]),e._v("管道构建")]),e._v(" "),s("p",[e._v("Docker能够通过"),s("code",[e._v("stdin")]),e._v("与本地或远程构建上下文管道"),s("code",[e._v("Dockerfile")]),e._v("来构建镜像。 通过"),s("code",[e._v("stdin")]),e._v("管道"),s("code",[e._v("Dockerfile")]),e._v("对于执行一次性构建非常有用，无需将Dockerfile写入磁盘，或者在生成"),s("code",[e._v("Dockerfile")]),e._v("的情况下，并且之后不会持久化。")]),e._v(" "),s("blockquote",[s("p",[e._v("本节中使用的文本示例只是为方便起见，在"),s("code",[e._v("stdin")]),e._v("上提供的任何"),s("code",[e._v("Dockerfile")]),e._v("方法都可以被使用。\n例如，以下命令是等效的：")])]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" -e "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'FROM busybox\\nRUN echo \"hello world\"'")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" build -\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" build -"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('EOF\nFROM busybox\nRUN echo "hello world"\nEOF')]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("blockquote",[s("p",[e._v("您可以使用您的首选方法或最适合您需求的方法替换示例。")])]),e._v(" "),s("p",[s("strong",[e._v("使用来自STDIN的DOCKERFILE构建镜像，不发送构建上下文")])]),e._v(" "),s("p",[e._v("此语法可通过"),s("code",[e._v("stdin")]),e._v("使用"),s("code",[e._v("Dockerfile")]),e._v("构建镜像，而不将其他文件作为构建上下文发送。 字符（"),s("code",[e._v("-")]),e._v(" ）获取PATH的位置，并指示Docker从"),s("code",[e._v("stdin")]),e._v("而不是目录中读取构建上下文（仅包含Dockerfile）：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" build "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OPTIONS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" -\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("以下示例使用通过"),s("code",[e._v("stdin")]),e._v("传递的"),s("code",[e._v("Dockerfile")]),e._v("构建镜像。 没有文件作为构建上下文发送到守护程序。")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" build -t myimage:latest -"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('EOF\nFROM busybox\nRUN echo "hello world"\nEOF')]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("在"),s("code",[e._v("Dockerfile")]),e._v("不需要将文件复制到镜像中并且提高构建速度的情况下，省略构建上下文非常有用，这样的话没有文件发送到守护程序。")]),e._v(" "),s("p",[e._v("如果要通过从构建上下文中排除某些文件来提高构建速度，请参阅"),s("a",{attrs:{href:"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#exclude-with-dockerignore",target:"_blank",rel:"noopener noreferrer"}},[e._v("使用.dockerignore排除"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("blockquote",[s("p",[e._v("注意：如果使用此语法，则尝试使用"),s("code",[e._v("COPY")]),e._v("或"),s("code",[e._v("ADD")]),e._v("的Dockerfile构建将失败。 以下示例说明了这一点：")])]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# create a directory to work in")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" example\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" example\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# create an example file")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("touch")]),e._v(" somefile.txt\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" build -t myimage:latest -"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("EOF\nFROM busybox\nCOPY somefile.txt .\nRUN cat /somefile.txt\nEOF")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# observe that the build fails")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\nStep "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v("/3 "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" COPY somefile.txt "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\nCOPY failed: "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("stat")]),e._v(" /var/lib/docker/tmp/docker-builder249218248/somefile.txt: no such "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("file")]),e._v(" or directory\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br")])]),s("p",[s("strong",[e._v("使用本地构建上下文和STDIN的DOCKERFILE构建镜像")])]),e._v(" "),s("p",[e._v("此语法使用本地文件系统上的文件构建镜像，同时使用"),s("code",[e._v("stdin")]),e._v("中的"),s("code",[e._v("Dockerfile")]),e._v("。 使用"),s("code",[e._v("-f")]),e._v("（或"),s("code",[e._v("--file")]),e._v("）选项指定要使用的"),s("code",[e._v("Dockerfile")]),e._v("，使用字符（"),s("code",[e._v("-")]),e._v(" ）作为文件名来指示Docker从"),s("code",[e._v("stdin")]),e._v("读取"),s("code",[e._v("Dockerfile")]),e._v("：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" build "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OPTIONS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" -f- "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("PATH")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("下面的示例使用当前目录（"),s("code",[e._v(".")]),e._v("）作为构建上下文，并使用"),s("code",[e._v("Dockerfile")]),e._v("构建镜像，该Dockerfile使用当前文档传递给"),s("code",[e._v("stdin")]),e._v("。")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# create a directory to work in")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" example\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" example\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# create an example file")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("touch")]),e._v(" somefile.txt\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# build an image using the current directory as context, and a Dockerfile passed through stdin")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" build -t myimage:latest -f- "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("EOF\nFROM busybox\nCOPY somefile.txt .\nRUN cat /somefile.txt\nEOF")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])]),s("p",[s("strong",[e._v("使用远程构建上下文和STDIN的DOCKERFILE构建镜像")])]),e._v(" "),s("p",[e._v("此语法使用远程"),s("code",[e._v("git")]),e._v("仓库文件构建镜像，同时使用"),s("code",[e._v("stdin")]),e._v("中的"),s("code",[e._v("Dockerfile")]),e._v("。 使用"),s("code",[e._v("-f")]),e._v("（或"),s("code",[e._v("--file")]),e._v("）选项指定要使用的"),s("code",[e._v("Dockerfile")]),e._v("，使用字符（"),s("code",[e._v("-")]),e._v(" ）作为文件名来指示Docker从"),s("code",[e._v("stdin")]),e._v("读取"),s("code",[e._v("Dockerfile")]),e._v("：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" build "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OPTIONS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" -f- "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("PATH")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("如果您希望从存储库构建镜像不包含"),s("code",[e._v("Dockerfile")]),e._v("，或者您希望使用自定义"),s("code",[e._v("Dockerfile")]),e._v("构建，而不维护自己的存储库分支，则此语法非常有用。")]),e._v(" "),s("p",[e._v("下面的示例使用"),s("code",[e._v("stdin")]),e._v("中的"),s("code",[e._v("Dockerfile")]),e._v("构建镜像，并在"),s("a",{attrs:{href:"https://github.com/docker-library/hello-world",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub上的“hello-world”Git存储库"),s("OutboundLink")],1),e._v(" 中添加"),s("code",[e._v("README.md")]),e._v("文件。")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" build -t myimage:latest -f- https://github.com/docker-library/hello-world.git "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("EOF\nFROM busybox\nCOPY README.md .\nEOF")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("blockquote",[s("p",[e._v("提示：\n使用远程Git存储库构建镜像作为构建上下文时，Docker会在本地计算机上执行存储库的"),s("code",[e._v("git clone")]),e._v("，并将这些文件作为构建上下文发送到守护程序。 此功能要求在运行"),s("code",[e._v("docker build")]),e._v("命令的主机上安装"),s("code",[e._v("git")]),e._v("。")])]),e._v(" "),s("h3",{attrs:{id:"_1-4-包含-dockerignore文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-包含-dockerignore文件"}},[e._v("#")]),e._v(" 1.4. 包含.dockerignore文件")]),e._v(" "),s("p",[e._v("要排除与构建无关的文件（不重构源存储库），请使用"),s("code",[e._v(".dockerignore")]),e._v("文件。 此文件支持类似于"),s("code",[e._v(".gitignore")]),e._v("文件的排除模式。 有关创建信息，请参阅"),s("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/#dockerignore-file",target:"_blank",rel:"noopener noreferrer"}},[e._v(".dockerignore文件"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("h3",{attrs:{id:"_1-5-使用多阶段构建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-使用多阶段构建"}},[e._v("#")]),e._v(" 1.5. 使用多阶段构建")]),e._v(" "),s("p",[e._v("多阶段构建允许您大幅减小最终镜像的大小，而无需减少中间层和文件的数量。")]),e._v(" "),s("p",[e._v("由于镜像是在构建过程的最后阶段构建的，因此可以通过利用构建缓存来最小化镜像层。")]),e._v(" "),s("p",[e._v("例如，如果您的构建包含多个镜像层，则可以从较不频繁更改（以确保构建缓存可重用）到更频繁更改的顺序进行排序：")]),e._v(" "),s("ul",[s("li",[e._v("安装构建应用程序所需的工具")]),e._v(" "),s("li",[e._v("安装或更新库依赖项")]),e._v(" "),s("li",[e._v("生成您的应用程序")])]),e._v(" "),s("p",[e._v("一般Go应用程序的Dockerfile如下所示：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("FROM golang:1.11-alpine AS build\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Install tools required for project")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Run `docker build --no-cache .` to update dependencies")]),e._v("\nRUN apk "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" --no-cache "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v("\nRUN go get github.com/golang/dep/cmd/dep\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# List project dependencies with Gopkg.toml and Gopkg.lock")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# These layers are only re-built when Gopkg files are updated")]),e._v("\nCOPY Gopkg.lock Gopkg.toml /go/src/project/\nWORKDIR /go/src/project/\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Install library dependencies")]),e._v("\nRUN dep ensure -vendor-only\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Copy the entire project and build it")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This layer is rebuilt when a file changes in the project directory")]),e._v("\nCOPY "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" /go/src/project/\nRUN go build -o /bin/project\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This results in a single layer image")]),e._v("\nFROM scratch\nCOPY --from"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("build /bin/project /bin/project\nENTRYPOINT "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/bin/project"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\nCMD "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"--help"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br")])]),s("h3",{attrs:{id:"_1-6-不要安装不必要的包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-不要安装不必要的包"}},[e._v("#")]),e._v(" 1.6. 不要安装不必要的包")]),e._v(" "),s("p",[e._v("为了降低复杂性，依赖性，文件大小和构建时间，请避免安装额外的或不必要的软件包，因为它们可能“很好”。例如，您不需要在数据库镜像中包含文本编辑器。")]),e._v(" "),s("h3",{attrs:{id:"_1-7-解耦应用程序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-解耦应用程序"}},[e._v("#")]),e._v(" 1.7. 解耦应用程序")]),e._v(" "),s("p",[e._v("每个容器应该只有一个问题。将应用程序分离到多个容器中可以更容易地水平扩展和重用容器。例如，Web应用程序堆栈可能包含三个独立的容器，每个容器都有自己独特的镜像，以分离的方式管理Web应用程序，数据库和内存缓存。")]),e._v(" "),s("p",[e._v("将每个容器限制为一个进程是一个很好的经验法则，但它不是一个硬性规则。例如，不仅可以使用init进程生成容器，而且某些程序可能会自行生成其他进程。例如，"),s("code",[e._v("Celery")]),e._v("可以生成多个工作进程，"),s("code",[e._v("Apache")]),e._v("可以为每个请求创建一个进程。")]),e._v(" "),s("p",[e._v("使用您的最佳判断，尽可能保持容器清洁和模块化。如果容器彼此依赖，则可以使用"),s("code",[e._v("Docker容器网络")]),e._v("来确保这些容器可以进行通信。")]),e._v(" "),s("h3",{attrs:{id:"_1-8-最小化层数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-最小化层数"}},[e._v("#")]),e._v(" 1.8. 最小化层数")]),e._v(" "),s("p",[e._v("在旧版本的Docker中，最大限度地减少镜像中的镜像层数量以确保它们具有高性能非常重要。添加了以下功能以减少此限制：")]),e._v(" "),s("ul",[s("li",[e._v("只有"),s("code",[e._v("RUN")]),e._v("，"),s("code",[e._v("COPY")]),e._v("，"),s("code",[e._v("ADD")]),e._v("指令才能创建镜像层。其他指令创建临时中间镜像，并不增加构建的大小。")]),e._v(" "),s("li",[e._v("在可能的情况下，使用"),s("code",[e._v("多阶段构建")]),e._v("，并仅将所需的工件复制到最终镜像中。这允许您在中间构建阶段中包含工具和调试信息，而不会增加最终镜像的大小。")])]),e._v(" "),s("h3",{attrs:{id:"_1-9-对多行参数进行排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-对多行参数进行排序"}},[e._v("#")]),e._v(" 1.9. 对多行参数进行排序")]),e._v(" "),s("p",[e._v("只要有可能，通过按字母顺序排序多行参数来缓解以后的更改。这有助于避免重复包并使列表更容易更新。这也使PR更容易阅读和审查。在反斜杠（\\）之前添加空格也有帮助。")]),e._v(" "),s("p",[e._v("这是"),s("code",[e._v("buildpack-deps")]),e._v("镜像中的一个示例：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("RUN "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" update "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -y "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  bzr "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  cvs "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  mercurial "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  subversion\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("h3",{attrs:{id:"_1-10-利用构建缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-利用构建缓存"}},[e._v("#")]),e._v(" 1.10. 利用构建缓存")]),e._v(" "),s("p",[e._v("构建镜像时，Docker会逐步执行Dockerfile中的指令，按指定的顺序执行每个指令。在检查每条指令时，Docker会在其缓存中查找可以重用的现有镜像，而不是创建新的（重复）镜像。")]),e._v(" "),s("p",[e._v("如果您根本不想使用缓存，可以在docker build命令中使用--no-cache = true选项。但是，如果您确实让Docker使用其缓存，那么了解它何时可以找到匹配的镜像非常重要。 Docker遵循的基本规则概述如下：")]),e._v(" "),s("p",[e._v("从已经在高速缓存中的父镜像开始，将下一条指令与从该基本镜像导出的所有子镜像进行比较，以查看它们中的一个是否使用完全相同的指令构建。如果不是，则缓存无效。")]),e._v(" "),s("p",[e._v("在大多数情况下，只需将Dockerfile中的指令与其中一个子镜像进行比较即可。但是，某些说明需要更多的检查和解释。")]),e._v(" "),s("p",[e._v("对于"),s("code",[e._v("ADD")]),e._v("和"),s("code",[e._v("COPY")]),e._v("指令，将检查镜像中文件的内容，并为每个文件计算校验和。在这些校验和中不考虑文件的最后修改时间和最后访问时间。在高速缓存查找期间，将校验和与现有镜像中的校验和进行比较。如果文件中的任何内容（例如内容和元数据）发生了任何更改，则缓存将失效。")]),e._v(" "),s("p",[e._v("除了"),s("code",[e._v("ADD")]),e._v("和"),s("code",[e._v("COPY")]),e._v("命令之外，高速缓存检查不会查看容器中的文件以确定高速缓存匹配。例如，在处理RUN apt-get -y update命令时，不检查容器中更新的文件以确定是否存在缓存命中。在这种情况下，只需使用命令字符串本身来查找匹配项。")]),e._v(" "),s("p",[e._v("缓存无效后，所有后续Dockerfile命令都会生成新镜像，并且不使用缓存。")]),e._v(" "),s("h2",{attrs:{id:"_2-dockerfile-指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-dockerfile-指令"}},[e._v("#")]),e._v(" 2. Dockerfile 指令")]),e._v(" "),s("p",[e._v("这些建议旨在帮助您创建高效且可维护的Dockerfile。")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[e._v("指令")]),e._v(" "),s("th",{staticStyle:{"text-align":"left"}},[e._v("作用")]),e._v(" "),s("th",{staticStyle:{"text-align":"left"}},[e._v("用法")])])]),e._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[e._v("FROM")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[e._v("Dockerfile")]),e._v("中的第一条非注释指令")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[e._v("FROM ubuntu")])])]),e._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[e._v("ADD/COPY")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("将多个源文件从上下文复制到指定路径的容器的文件系统")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[e._v("COPY .bash_profile /home")])])]),e._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[e._v("ENV")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("设置环境变量")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[e._v("ENV HOSTNAME=test")])])]),e._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[e._v("RUN")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("执行某个命令")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[e._v("RUN apt-get update")])])]),e._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[e._v("CMD")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("执行容器的默认启动项")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[e._v('CMD ["/bin/echo", "hello world"]')])])]),e._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[e._v("EXPOSE")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("容器将侦听的网络端口")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[e._v("EXPOSE 8093")])])]),e._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[e._v("LABEL")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("为镜像添加标签")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[e._v('LABEL com.example.version="0.0.1-beta"')])])]),e._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[e._v("ENTRYPOINT")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("设置镜像的主命令，允许该镜像像该命令一样运行（然后使用CMD作为默认标志）")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[e._v('ENTRYPOINT ["s3cmd"] CMD ["--help"]')])])]),e._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[e._v("VOLUME")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("数据挂载")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[e._v("VOLUME /myvol")])])]),e._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[e._v("USER")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("指定服务运行的用户")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[e._v('USER <UID>[:<GID>]"')])])]),e._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[e._v("WORKDIR")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("指定绝对路径的工作目录")]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[e._v("WORKDIR /path/to/workdir")])])])])])])}),[],!1,null,null,null);t.default=n.exports}}]);